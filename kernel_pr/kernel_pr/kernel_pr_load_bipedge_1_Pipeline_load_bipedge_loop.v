// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_pr_load_bipedge_1_Pipeline_load_bipedge_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dram1_AWVALID,
        m_axi_dram1_AWREADY,
        m_axi_dram1_AWADDR,
        m_axi_dram1_AWID,
        m_axi_dram1_AWLEN,
        m_axi_dram1_AWSIZE,
        m_axi_dram1_AWBURST,
        m_axi_dram1_AWLOCK,
        m_axi_dram1_AWCACHE,
        m_axi_dram1_AWPROT,
        m_axi_dram1_AWQOS,
        m_axi_dram1_AWREGION,
        m_axi_dram1_AWUSER,
        m_axi_dram1_WVALID,
        m_axi_dram1_WREADY,
        m_axi_dram1_WDATA,
        m_axi_dram1_WSTRB,
        m_axi_dram1_WLAST,
        m_axi_dram1_WID,
        m_axi_dram1_WUSER,
        m_axi_dram1_ARVALID,
        m_axi_dram1_ARREADY,
        m_axi_dram1_ARADDR,
        m_axi_dram1_ARID,
        m_axi_dram1_ARLEN,
        m_axi_dram1_ARSIZE,
        m_axi_dram1_ARBURST,
        m_axi_dram1_ARLOCK,
        m_axi_dram1_ARCACHE,
        m_axi_dram1_ARPROT,
        m_axi_dram1_ARQOS,
        m_axi_dram1_ARREGION,
        m_axi_dram1_ARUSER,
        m_axi_dram1_RVALID,
        m_axi_dram1_RREADY,
        m_axi_dram1_RDATA,
        m_axi_dram1_RLAST,
        m_axi_dram1_RID,
        m_axi_dram1_RFIFONUM,
        m_axi_dram1_RUSER,
        m_axi_dram1_RRESP,
        m_axi_dram1_BVALID,
        m_axi_dram1_BREADY,
        m_axi_dram1_BRESP,
        m_axi_dram1_BID,
        m_axi_dram1_BUSER,
        bipedge_stream_8_din,
        bipedge_stream_8_full_n,
        bipedge_stream_8_write,
        bipedge_stream_9_din,
        bipedge_stream_9_full_n,
        bipedge_stream_9_write,
        bipedge_stream_10_din,
        bipedge_stream_10_full_n,
        bipedge_stream_10_write,
        bipedge_stream_11_din,
        bipedge_stream_11_full_n,
        bipedge_stream_11_write,
        bipedge_stream_12_din,
        bipedge_stream_12_full_n,
        bipedge_stream_12_write,
        bipedge_stream_13_din,
        bipedge_stream_13_full_n,
        bipedge_stream_13_write,
        bipedge_stream_14_din,
        bipedge_stream_14_full_n,
        bipedge_stream_14_write,
        bipedge_stream_15_din,
        bipedge_stream_15_full_n,
        bipedge_stream_15_write,
        sext_ln17,
        shr,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dram1_AWVALID;
input   m_axi_dram1_AWREADY;
output  [63:0] m_axi_dram1_AWADDR;
output  [0:0] m_axi_dram1_AWID;
output  [31:0] m_axi_dram1_AWLEN;
output  [2:0] m_axi_dram1_AWSIZE;
output  [1:0] m_axi_dram1_AWBURST;
output  [1:0] m_axi_dram1_AWLOCK;
output  [3:0] m_axi_dram1_AWCACHE;
output  [2:0] m_axi_dram1_AWPROT;
output  [3:0] m_axi_dram1_AWQOS;
output  [3:0] m_axi_dram1_AWREGION;
output  [0:0] m_axi_dram1_AWUSER;
output   m_axi_dram1_WVALID;
input   m_axi_dram1_WREADY;
output  [511:0] m_axi_dram1_WDATA;
output  [63:0] m_axi_dram1_WSTRB;
output   m_axi_dram1_WLAST;
output  [0:0] m_axi_dram1_WID;
output  [0:0] m_axi_dram1_WUSER;
output   m_axi_dram1_ARVALID;
input   m_axi_dram1_ARREADY;
output  [63:0] m_axi_dram1_ARADDR;
output  [0:0] m_axi_dram1_ARID;
output  [31:0] m_axi_dram1_ARLEN;
output  [2:0] m_axi_dram1_ARSIZE;
output  [1:0] m_axi_dram1_ARBURST;
output  [1:0] m_axi_dram1_ARLOCK;
output  [3:0] m_axi_dram1_ARCACHE;
output  [2:0] m_axi_dram1_ARPROT;
output  [3:0] m_axi_dram1_ARQOS;
output  [3:0] m_axi_dram1_ARREGION;
output  [0:0] m_axi_dram1_ARUSER;
input   m_axi_dram1_RVALID;
output   m_axi_dram1_RREADY;
input  [511:0] m_axi_dram1_RDATA;
input   m_axi_dram1_RLAST;
input  [0:0] m_axi_dram1_RID;
input  [11:0] m_axi_dram1_RFIFONUM;
input  [0:0] m_axi_dram1_RUSER;
input  [1:0] m_axi_dram1_RRESP;
input   m_axi_dram1_BVALID;
output   m_axi_dram1_BREADY;
input  [1:0] m_axi_dram1_BRESP;
input  [0:0] m_axi_dram1_BID;
input  [0:0] m_axi_dram1_BUSER;
output  [63:0] bipedge_stream_8_din;
input   bipedge_stream_8_full_n;
output   bipedge_stream_8_write;
output  [63:0] bipedge_stream_9_din;
input   bipedge_stream_9_full_n;
output   bipedge_stream_9_write;
output  [63:0] bipedge_stream_10_din;
input   bipedge_stream_10_full_n;
output   bipedge_stream_10_write;
output  [63:0] bipedge_stream_11_din;
input   bipedge_stream_11_full_n;
output   bipedge_stream_11_write;
output  [63:0] bipedge_stream_12_din;
input   bipedge_stream_12_full_n;
output   bipedge_stream_12_write;
output  [63:0] bipedge_stream_13_din;
input   bipedge_stream_13_full_n;
output   bipedge_stream_13_write;
output  [63:0] bipedge_stream_14_din;
input   bipedge_stream_14_full_n;
output   bipedge_stream_14_write;
output  [63:0] bipedge_stream_15_din;
input   bipedge_stream_15_full_n;
output   bipedge_stream_15_write;
input  [57:0] sext_ln17;
input  [27:0] shr;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg m_axi_dram1_RREADY;
reg bipedge_stream_8_write;
reg bipedge_stream_9_write;
reg bipedge_stream_10_write;
reg bipedge_stream_11_write;
reg bipedge_stream_12_write;
reg bipedge_stream_13_write;
reg bipedge_stream_14_write;
reg bipedge_stream_15_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln17_reg_296;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln17_fu_187_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dram1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    bipedge_stream_8_blk_n;
reg    bipedge_stream_9_blk_n;
reg    bipedge_stream_10_blk_n;
reg    bipedge_stream_11_blk_n;
reg    bipedge_stream_12_blk_n;
reg    bipedge_stream_13_blk_n;
reg    bipedge_stream_14_blk_n;
reg    bipedge_stream_15_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] trunc_ln674_fu_210_p1;
reg   [63:0] trunc_ln674_reg_300;
reg   [63:0] p_s_reg_305;
reg   [63:0] p_6_reg_310;
reg   [63:0] p_7_reg_315;
reg   [63:0] p_8_reg_320;
reg   [63:0] p_9_reg_325;
reg   [63:0] p_10_reg_330;
reg   [63:0] p_0_reg_335;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [27:0] bid_fu_98;
wire   [27:0] add_ln17_fu_193_p2;
wire    ap_loop_init;
reg   [27:0] ap_sig_allocacmp_bid_34;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_pr_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln17_fu_187_p2 == 1'd0))) begin
            bid_fu_98 <= add_ln17_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            bid_fu_98 <= 28'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln17_reg_296 <= icmp_ln17_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_296 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_0_reg_335 <= {{m_axi_dram1_RDATA[511:448]}};
        p_10_reg_330 <= {{m_axi_dram1_RDATA[447:384]}};
        p_6_reg_310 <= {{m_axi_dram1_RDATA[191:128]}};
        p_7_reg_315 <= {{m_axi_dram1_RDATA[255:192]}};
        p_8_reg_320 <= {{m_axi_dram1_RDATA[319:256]}};
        p_9_reg_325 <= {{m_axi_dram1_RDATA[383:320]}};
        p_s_reg_305 <= {{m_axi_dram1_RDATA[127:64]}};
        trunc_ln674_reg_300 <= trunc_ln674_fu_210_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_296 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bid_34 = 28'd0;
    end else begin
        ap_sig_allocacmp_bid_34 = bid_fu_98;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_10_blk_n = bipedge_stream_10_full_n;
    end else begin
        bipedge_stream_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_10_write = 1'b1;
    end else begin
        bipedge_stream_10_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_11_blk_n = bipedge_stream_11_full_n;
    end else begin
        bipedge_stream_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_11_write = 1'b1;
    end else begin
        bipedge_stream_11_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_12_blk_n = bipedge_stream_12_full_n;
    end else begin
        bipedge_stream_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_12_write = 1'b1;
    end else begin
        bipedge_stream_12_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_13_blk_n = bipedge_stream_13_full_n;
    end else begin
        bipedge_stream_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_13_write = 1'b1;
    end else begin
        bipedge_stream_13_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_14_blk_n = bipedge_stream_14_full_n;
    end else begin
        bipedge_stream_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_14_write = 1'b1;
    end else begin
        bipedge_stream_14_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_15_blk_n = bipedge_stream_15_full_n;
    end else begin
        bipedge_stream_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_15_write = 1'b1;
    end else begin
        bipedge_stream_15_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_8_blk_n = bipedge_stream_8_full_n;
    end else begin
        bipedge_stream_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_8_write = 1'b1;
    end else begin
        bipedge_stream_8_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bipedge_stream_9_blk_n = bipedge_stream_9_full_n;
    end else begin
        bipedge_stream_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bipedge_stream_9_write = 1'b1;
    end else begin
        bipedge_stream_9_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dram1_blk_n_R = m_axi_dram1_RVALID;
    end else begin
        dram1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_dram1_RREADY = 1'b1;
    end else begin
        m_axi_dram1_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_193_p2 = (ap_sig_allocacmp_bid_34 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln17_reg_296 == 1'd0) & (m_axi_dram1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((bipedge_stream_8_full_n == 1'b0) | (bipedge_stream_15_full_n == 1'b0) | (bipedge_stream_14_full_n == 1'b0) | (bipedge_stream_13_full_n == 1'b0) | (bipedge_stream_12_full_n == 1'b0) | (bipedge_stream_11_full_n == 1'b0) | (bipedge_stream_10_full_n == 1'b0) | (bipedge_stream_9_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln17_reg_296 == 1'd0) & (m_axi_dram1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((bipedge_stream_8_full_n == 1'b0) | (bipedge_stream_15_full_n == 1'b0) | (bipedge_stream_14_full_n == 1'b0) | (bipedge_stream_13_full_n == 1'b0) | (bipedge_stream_12_full_n == 1'b0) | (bipedge_stream_11_full_n == 1'b0) | (bipedge_stream_10_full_n == 1'b0) | (bipedge_stream_9_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln17_reg_296 == 1'd0) & (m_axi_dram1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((bipedge_stream_8_full_n == 1'b0) | (bipedge_stream_15_full_n == 1'b0) | (bipedge_stream_14_full_n == 1'b0) | (bipedge_stream_13_full_n == 1'b0) | (bipedge_stream_12_full_n == 1'b0) | (bipedge_stream_11_full_n == 1'b0) | (bipedge_stream_10_full_n == 1'b0) | (bipedge_stream_9_full_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln17_reg_296 == 1'd0) & (m_axi_dram1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((bipedge_stream_8_full_n == 1'b0) | (bipedge_stream_15_full_n == 1'b0) | (bipedge_stream_14_full_n == 1'b0) | (bipedge_stream_13_full_n == 1'b0) | (bipedge_stream_12_full_n == 1'b0) | (bipedge_stream_11_full_n == 1'b0) | (bipedge_stream_10_full_n == 1'b0) | (bipedge_stream_9_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_cur_n = dram1_blk_n_R;

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (bipedge_stream_9_blk_n & bipedge_stream_8_blk_n & bipedge_stream_15_blk_n & bipedge_stream_14_blk_n & bipedge_stream_13_blk_n & bipedge_stream_12_blk_n & bipedge_stream_11_blk_n & bipedge_stream_10_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bipedge_stream_10_din = p_6_reg_310;

assign bipedge_stream_11_din = p_7_reg_315;

assign bipedge_stream_12_din = p_8_reg_320;

assign bipedge_stream_13_din = p_9_reg_325;

assign bipedge_stream_14_din = p_10_reg_330;

assign bipedge_stream_15_din = p_0_reg_335;

assign bipedge_stream_8_din = trunc_ln674_reg_300;

assign bipedge_stream_9_din = p_s_reg_305;

assign icmp_ln17_fu_187_p2 = ((ap_sig_allocacmp_bid_34 == shr) ? 1'b1 : 1'b0);

assign m_axi_dram1_ARADDR = 64'd0;

assign m_axi_dram1_ARBURST = 2'd0;

assign m_axi_dram1_ARCACHE = 4'd0;

assign m_axi_dram1_ARID = 1'd0;

assign m_axi_dram1_ARLEN = 32'd0;

assign m_axi_dram1_ARLOCK = 2'd0;

assign m_axi_dram1_ARPROT = 3'd0;

assign m_axi_dram1_ARQOS = 4'd0;

assign m_axi_dram1_ARREGION = 4'd0;

assign m_axi_dram1_ARSIZE = 3'd0;

assign m_axi_dram1_ARUSER = 1'd0;

assign m_axi_dram1_ARVALID = 1'b0;

assign m_axi_dram1_AWADDR = 64'd0;

assign m_axi_dram1_AWBURST = 2'd0;

assign m_axi_dram1_AWCACHE = 4'd0;

assign m_axi_dram1_AWID = 1'd0;

assign m_axi_dram1_AWLEN = 32'd0;

assign m_axi_dram1_AWLOCK = 2'd0;

assign m_axi_dram1_AWPROT = 3'd0;

assign m_axi_dram1_AWQOS = 4'd0;

assign m_axi_dram1_AWREGION = 4'd0;

assign m_axi_dram1_AWSIZE = 3'd0;

assign m_axi_dram1_AWUSER = 1'd0;

assign m_axi_dram1_AWVALID = 1'b0;

assign m_axi_dram1_BREADY = 1'b0;

assign m_axi_dram1_WDATA = 512'd0;

assign m_axi_dram1_WID = 1'd0;

assign m_axi_dram1_WLAST = 1'b0;

assign m_axi_dram1_WSTRB = 64'd0;

assign m_axi_dram1_WUSER = 1'd0;

assign m_axi_dram1_WVALID = 1'b0;

assign trunc_ln674_fu_210_p1 = m_axi_dram1_RDATA[63:0];

endmodule //kernel_pr_load_bipedge_1_Pipeline_load_bipedge_loop
